package com.evervault.sdk.common

import com.evervault.sdk.common.utils.writeFile
import io.ktor.util.decodeBase64Bytes
import kotlinx.coroutines.runBlocking
import org.junit.Test

import org.junit.Assert.*
import org.junit.Before

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class EvervaultTest {
    private val encryptedStringRegex =
        Regex("((ev(:|%3A))(debug(:|%3A))?(([A-z0-9+/=%]+)(:|%3A))?((number|boolean|string)(:|%3A))?(([A-z0-9+/=%]+)(:|%3A)){3}(\\$|%24))|(((eyJ[A-z0-9+=.]+){2})([\\w]{8}(-[\\w]{4}){3}-[\\w]{12}))")

    @Before
    fun setup() {
        Evervault.shared.configure(
            teamId = BuildConfig.EV_TEAM_UUID,
            appId = BuildConfig.EV_APP_UUID,
            customConfig = CustomConfig(isDebugMode = true)
        )
    }

    @Test
    fun testEncryptString() = runBlocking {
        val encryptedString = Evervault.shared.encrypt("Foo")
        println(encryptedString)
        assertNotNull(encryptedString)
        val matches = encryptedStringRegex.findAll(encryptedString as String).count()
        assertEquals(1, matches)
    }

    @Test
    fun testEncryptANumber() = runBlocking {
        val numberToEncrypt = 7
        val encryptedNumber = Evervault.shared.encrypt(numberToEncrypt)
        println(encryptedNumber)
        assertNotNull(encryptedNumber)
        val matches = encryptedStringRegex.findAll(encryptedNumber as String).count()
        assertEquals(1, matches)
        assertEquals(true, assertFormatting(encryptedNumber, DataType.NUMBER))
    }

//    @Test
//    fun testDebugCipherText() = runBlocking {
//        Evervault.shared.configure(
//            teamId = getenv("EV_TEAM_UUID"),
//            appId = getenv("EV_APP_UUID"),
//            customConfig = CustomConfig(isDebugMode = true)
//        )
//        val encryptedString = Evervault.shared.encrypt("Foo")
//        val encryptedNumber = Evervault.shared.encrypt(7)
//        val encryptedBoolean = Evervault.shared.encrypt(true)
//
//        assertNotNull(encryptedString)
//        println(encryptedString)
//        assertNotNull(encryptedNumber)
//        println(encryptedNumber)
//        assertNotNull(encryptedBoolean)
//        println(encryptedBoolean)
//
//        assertEquals(true, assertFormatting(encryptedString as String, DataType.STRING, true))
//        assertEquals(true, assertFormatting(encryptedNumber as String, DataType.NUMBER, true))
//        assertEquals(true, assertFormatting(encryptedBoolean as String, DataType.BOOLEAN, true))
//    }

    @Test
    fun testRoleBasedEncryption() = runBlocking {
        val encryptedString = Evervault.shared.encrypt("Foo", "decrypt-api")
        assertNotNull(encryptedString)
        println(encryptedString)
        assertEquals(true, assertFormatting(encryptedString as String, DataType.STRING))
    }

    @Test
    fun testEncryptImage() = runBlocking {
        val base64Image = """
        
        """.trimIndent()
        val imageData = base64Image.decodeBase64Bytes()
        val encryptedImage = Evervault.shared.encrypt(imageData)
        assertNotNull(encryptedImage)
        val encryptedImageData = encryptedImage as ByteArray
        assertEquals(22212, encryptedImageData.size)
        writeFile(encryptedImageData)
    }

    private fun assertFormatting(
        cipherText: String,
        dataType: DataType,
        debugMode: Boolean = true
    ): Boolean {
        var stringTypeSize = 6;
        var numberOrBoolTypeSize = 7;

        if (debugMode) {
            stringTypeSize++
            numberOrBoolTypeSize++
        }

        val parts = cipherText.split(":")
        if (dataType == DataType.STRING) {
            return parts.size == stringTypeSize
        }
        if (dataType == DataType.BOOLEAN || dataType == DataType.NUMBER) {
            return parts.size == numberOrBoolTypeSize
        }
        return false
    }
}